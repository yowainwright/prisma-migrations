[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.14.8","content-config-digest","262e19c900bdc416","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://jeffry.in\",\"compressHTML\":true,\"base\":\"/prisma-migrations\",\"trailingSlash\":\"never\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":{\"name\":\"yves-klein-blue\",\"type\":\"dark\",\"colors\":{\"editor.background\":\"#031030\",\"editor.foreground\":\"#A8E6FF\"},\"tokenColors\":[{\"scope\":[\"comment\",\"punctuation.definition.comment\"],\"settings\":{\"foreground\":\"#8DC891\",\"fontStyle\":\"italic\"}},{\"scope\":[\"keyword\",\"storage.type\",\"storage.modifier\"],\"settings\":{\"foreground\":\"#82CFFF\"}},{\"scope\":[\"string\",\"string.quoted\"],\"settings\":{\"foreground\":\"#FFF4B3\"}},{\"scope\":[\"entity.name.function\",\"support.function\"],\"settings\":{\"foreground\":\"#FF8BA7\"}},{\"scope\":[\"variable\",\"variable.parameter\"],\"settings\":{\"foreground\":\"#82CFFF\"}},{\"scope\":[\"constant.numeric\",\"constant.language\"],\"settings\":{\"foreground\":\"#C9E5B4\"}},{\"scope\":[\"entity.name.type\",\"entity.name.class\",\"support.type\",\"support.class\"],\"settings\":{\"foreground\":\"#FF8BA7\"}},{\"scope\":[\"keyword.operator\"],\"settings\":{\"foreground\":\"#FFB3D9\"}},{\"scope\":[\"punctuation\"],\"settings\":{\"foreground\":\"#FFE55C\"}}]},\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true,\"allowedDomains\":[]},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false,\"failOnPrerenderConflict\":false},\"legacy\":{\"collections\":false}}","docs",["Map",11,12,21,22,30,31,39,40],"api-reference",{"id":11,"data":13,"body":16,"filePath":17,"digest":18,"legacyId":19,"deferredRender":20},{"title":14,"description":15},"API Reference","Complete reference for Prisma Migrations CLI and Node.js API","Prisma Migrations provides both a CLI interface and a programmatic Node.js API.\n\n## CLI Commands\n\nAll CLI commands use the following format:\n\n```bash\nnpx prisma-migrations \u003Ccommand> [options]\n```\n\n### `init`\n\nInitialize migrations directory with first migration file.\n\n```bash\nnpx prisma-migrations init\n```\n\n**Output:**\n```bash\n✓ Created migration: 1234567890_initial_migration\n  Location: ./prisma/migrations/1234567890_initial_migration\n```\n\n---\n\n### `create [name]`\n\nCreate a new migration file with optional name.\n\n```bash\nnpx prisma-migrations create add_users_table\n```\n\n**Arguments:**\n- `name` (optional) - Migration name (kebab-case recommended)\n\n**Output:**\n```bash\n✓ Created migration: 1234567890_add_users_table\n  Location: ./prisma/migrations/1234567890_add_users_table\n```\n\n---\n\n### `up [options]`\n\nRun pending migrations.\n\n```bash\n# Run all pending migrations\nnpx prisma-migrations up\n\n# Run next 3 migrations\nnpx prisma-migrations up --steps 3\n\n# Interactive mode - choose which migrations to run\nnpx prisma-migrations up --interactive\n```\n\n**Options:**\n- `--steps \u003Cnumber>` - Number of migrations to run\n- `--interactive` or `-i` - Interactive selection mode\n\n**Output:**\n```bash\n┌──────────┬──────────────────────────────────────────────────┐\n│ Status   │ Migrations                                       │\n├──────────┼──────────────────────────────────────────────────┤\n│ ✓        │ 2 migration(s) applied successfully              │\n└──────────┴──────────────────────────────────────────────────┘\n```\n\n---\n\n### `down [options]`\n\nRollback migrations.\n\n```bash\n# Rollback last migration\nnpx prisma-migrations down\n\n# Rollback last 2 migrations\nnpx prisma-migrations down --steps 2\n\n# Interactive mode - choose which migrations to rollback\nnpx prisma-migrations down --interactive\n```\n\n**Options:**\n- `--steps \u003Cnumber>` - Number of migrations to rollback (default: 1)\n- `--interactive` or `-i` - Interactive selection mode\n\n**Output:**\n```bash\n┌──────────┬──────────────────────────────────────────────────┐\n│ Status   │ Migrations                                       │\n├──────────┼──────────────────────────────────────────────────┤\n│ ↓        │ 1 migration(s) rolled back                       │\n└──────────┴──────────────────────────────────────────────────┘\n```\n\n---\n\n### `status`\n\nShow migration status (which migrations are applied/pending).\n\n```bash\nnpx prisma-migrations status\n```\n\n---\n\n### `pending`\n\nList all pending (not yet applied) migrations.\n\n```bash\nnpx prisma-migrations pending\n```\n\n**Output:**\n```bash\n3 pending migration(s):\n\n  1234567890_add_users_table\n  1234567891_add_posts_table\n  1234567892_add_comments_table\n```\n\n---\n\n### `applied`\n\nList all applied migrations.\n\n```bash\nnpx prisma-migrations applied\n```\n\n**Output:**\n```bash\n2 applied migration(s):\n\n  ✓ 1234567889_initial_migration\n  ✓ 1234567890_add_users_table\n```\n\n---\n\n### `latest`\n\nShow the latest applied migration.\n\n```bash\nnpx prisma-migrations latest\n```\n\n---\n\n### `reset`\n\nRollback all migrations.\n\n```bash\nnpx prisma-migrations reset\n```\n\n---\n\n### `fresh`\n\nRollback all migrations and re-run them (fresh start).\n\n```bash\nnpx prisma-migrations fresh\n```\n\n---\n\n### `refresh`\n\nAlias for `fresh` command.\n\n```bash\nnpx prisma-migrations refresh\n```\n\n---\n\n### Global Options\n\nThese options work with any command:\n\n- `--verbose` or `-v` - Enable verbose logging\n- `--log-level \u003Clevel>` - Set log level (silent, error, warn, info, debug, trace)\n\n**Example:**\n```bash\nnpx prisma-migrations up --verbose\nnpx prisma-migrations --log-level debug up\n```\n\n## Programmatic API\n\nUse the migrations system from your Node.js/TypeScript code.\n\n### Import\n\n```typescript\nimport { Migrations } from 'prisma-migrations';\nimport { PrismaClient } from '@prisma/client';\n```\n\n### Constructor\n\n```typescript\nnew Migrations(prisma: PrismaClient, config?: MigrationsConfig)\n```\n\n**Parameters:**\n\n| Parameter | Type | Required | Description |\n|-----------|------|----------|-------------|\n| `prisma` | `PrismaClient` | Yes | Your Prisma Client instance |\n| `config` | `MigrationsConfig` | No | Optional configuration |\n\n**Config Options:**\n\n```typescript\ninterface MigrationsConfig {\n  migrationsDir?: string;  // Default: auto-discovered from ./prisma/migrations\n  logLevel?: 'silent' | 'error' | 'warn' | 'info' | 'debug' | 'trace';\n}\n```\n\n**Example:**\n\n```typescript\nconst prisma = new PrismaClient();\nconst migrations = new Migrations(prisma, {\n  migrationsDir: './database/migrations',\n  logLevel: 'info'\n});\n```\n\n---\n\n### Methods\n\n#### `up(steps?: number): Promise\u003Cnumber>`\n\nRun pending migrations.\n\n**Parameters:**\n- `steps` (optional) - Number of migrations to run. If omitted, runs all pending migrations.\n\n**Returns:**\n- `Promise\u003Cnumber>` - Number of migrations applied\n\n**Example:**\n\n```typescript\n// Run all pending migrations\nconst count = await migrations.up();\nconsole.log(`Applied ${count} migrations`);\n\n// Run next 3 migrations\nawait migrations.up(3);\n```\n\n---\n\n#### `down(steps?: number): Promise\u003Cnumber>`\n\nRollback migrations.\n\n**Parameters:**\n- `steps` (optional) - Number of migrations to rollback (default: 1)\n\n**Returns:**\n- `Promise\u003Cnumber>` - Number of migrations rolled back\n\n**Example:**\n\n```typescript\n// Rollback last migration\nawait migrations.down();\n\n// Rollback last 3 migrations\nawait migrations.down(3);\n```\n\n---\n\n#### `pending(): Promise\u003CMigrationFile[]>`\n\nGet list of pending migrations.\n\n**Returns:**\n- `Promise\u003CMigrationFile[]>` - Array of pending migration objects\n\n**MigrationFile Interface:**\n\n```typescript\ninterface MigrationFile {\n  id: string;      // Migration ID (timestamp)\n  name: string;    // Migration name\n  path: string;    // Full path to migration file\n}\n```\n\n**Example:**\n\n```typescript\nconst pending = await migrations.pending();\nconsole.log(`${pending.length} pending migrations:`);\npending.forEach(m => console.log(`  ${m.id}_${m.name}`));\n```\n\n---\n\n#### `applied(): Promise\u003CMigrationFile[]>`\n\nGet list of applied migrations.\n\n**Returns:**\n- `Promise\u003CMigrationFile[]>` - Array of applied migration objects\n\n**Example:**\n\n```typescript\nconst applied = await migrations.applied();\nconsole.log(`${applied.length} applied migrations`);\n```\n\n---\n\n#### `latest(): Promise\u003CMigrationFile | null>`\n\nGet the latest applied migration.\n\n**Returns:**\n- `Promise\u003CMigrationFile | null>` - Latest migration or null if none applied\n\n**Example:**\n\n```typescript\nconst latest = await migrations.latest();\nif (latest) {\n  console.log(`Latest: ${latest.id}_${latest.name}`);\n}\n```\n\n---\n\n#### `status(): Promise\u003Cvoid>`\n\nDisplay migration status (logs to console).\n\n**Example:**\n\n```typescript\nawait migrations.status();\n```\n\n---\n\n#### `reset(): Promise\u003Cnumber>`\n\nRollback all migrations.\n\n**Returns:**\n- `Promise\u003Cnumber>` - Number of migrations rolled back\n\n**Example:**\n\n```typescript\nconst count = await migrations.reset();\nconsole.log(`Rolled back ${count} migrations`);\n```\n\n---\n\n#### `fresh(): Promise\u003Cnumber>`\n\nRollback all migrations and re-run them.\n\n**Returns:**\n- `Promise\u003Cnumber>` - Number of migrations applied after reset\n\n**Example:**\n\n```typescript\nawait migrations.fresh();\n```\n\n---\n\n#### `refresh(): Promise\u003C{ down: number; up: number }>`\n\nAlias for `fresh()` but returns detailed counts.\n\n**Returns:**\n- `Promise\u003C{ down: number; up: number }>` - Number of migrations rolled back and reapplied\n\n**Example:**\n\n```typescript\nconst result = await migrations.refresh();\nconsole.log(`Rolled back ${result.down}, applied ${result.up}`);\n```\n\n## Complete Example\n\n```typescript\nimport { Migrations } from 'prisma-migrations';\nimport { PrismaClient } from '@prisma/client';\n\nasync function runMigrations() {\n  const prisma = new PrismaClient();\n  const migrations = new Migrations(prisma);\n\n  try {\n    // Check pending migrations\n    const pending = await migrations.pending();\n    console.log(`Found ${pending.length} pending migrations`);\n\n    // Run migrations\n    const applied = await migrations.up();\n    console.log(`Successfully applied ${applied} migrations`);\n\n    // Verify latest migration\n    const latest = await migrations.latest();\n    if (latest) {\n      console.log(`Latest migration: ${latest.name}`);\n    }\n  } catch (error) {\n    console.error('Migration failed:', error);\n    process.exit(1);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\nrunMigrations();\n```\n\n## Usage Examples\n\n### Application Startup\n\nRun migrations when your app starts:\n\n```typescript\nimport { Migrations } from 'prisma-migrations';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nasync function bootstrap() {\n  const migrations = new Migrations(prisma);\n\n  // Run pending migrations on startup\n  const count = await migrations.up();\n  console.log(`Applied ${count} migrations`);\n\n  // Start your application\n  await startServer();\n}\n\nbootstrap();\n```\n\n### CI/CD Deployment\n\nRun migrations during deployment:\n\n```typescript\nimport { Migrations } from 'prisma-migrations';\nimport { PrismaClient } from '@prisma/client';\n\nasync function deploy() {\n  const prisma = new PrismaClient();\n  const migrations = new Migrations(prisma);\n\n  try {\n    // Check for pending migrations\n    const pending = await migrations.pending();\n\n    if (pending.length === 0) {\n      console.log('No migrations to run');\n      return;\n    }\n\n    console.log(`Running ${pending.length} migrations...`);\n    await migrations.up();\n    console.log('✓ Migrations completed successfully');\n  } catch (error) {\n    console.error('✗ Migration failed:', error);\n    process.exit(1);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\ndeploy();\n```\n\n### Safe Rollback\n\nRollback with error handling:\n\n```typescript\nimport { Migrations } from 'prisma-migrations';\nimport { PrismaClient } from '@prisma/client';\n\nasync function rollbackLastMigration() {\n  const prisma = new PrismaClient();\n  const migrations = new Migrations(prisma);\n\n  try {\n    const latest = await migrations.latest();\n    if (!latest) {\n      console.log('No migrations to rollback');\n      return;\n    }\n\n    console.log(`Rolling back: ${latest.name}`);\n    await migrations.down();\n    console.log('✓ Rollback successful');\n  } catch (error) {\n    console.error('✗ Rollback failed:', error);\n    process.exit(1);\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\nrollbackLastMigration();\n```\n\n### Development Reset\n\nFresh start for development:\n\n```typescript\nimport { Migrations } from 'prisma-migrations';\nimport { PrismaClient } from '@prisma/client';\n\nasync function resetDatabase() {\n  const prisma = new PrismaClient();\n  const migrations = new Migrations(prisma);\n\n  console.log('Resetting database...');\n\n  // Rollback all migrations\n  const rolled = await migrations.reset();\n  console.log(`Rolled back ${rolled} migrations`);\n\n  // Re-run all migrations\n  const applied = await migrations.up();\n  console.log(`Applied ${applied} migrations`);\n\n  console.log('✓ Database reset complete');\n\n  await prisma.$disconnect();\n}\n\nresetDatabase();\n```\n\n## TypeScript\n\nPrisma Migrations includes full TypeScript support with type safety:\n\n```typescript\nimport type {\n  PrismaClient,\n  MigrationFile,\n  MigrationFunction,\n  MigrationsConfig\n} from 'prisma-migrations';\n\n// Type-safe migration functions\nexport async function up(prisma: PrismaClient): Promise\u003Cvoid> {\n  await prisma.$executeRaw`CREATE TABLE users (id SERIAL PRIMARY KEY)`;\n}\n\nexport async function down(prisma: PrismaClient): Promise\u003Cvoid> {\n  await prisma.$executeRaw`DROP TABLE IF EXISTS users`;\n}\n\n// Type-safe configuration\nconst config: MigrationsConfig = {\n  migrationsDir: './database/migrations',\n  logLevel: 'info'\n};\n```","src/content/docs/api-reference.mdx","53510da360a6e4d4","api-reference.mdx",true,"introduction",{"id":21,"data":23,"body":26,"filePath":27,"digest":28,"legacyId":29,"deferredRender":20},{"title":24,"description":25},"Introduction to Prisma Migrations","Simple, powerful migration management for Prisma with rollback support and programmatic control","\u003Cdiv className=\"flex flex-wrap gap-2 mb-8\">\n  \u003Ca href=\"https://badge.fury.io/js/prisma-migrations\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \u003Cimg src=\"https://badge.fury.io/js/prisma-migrations.svg\" alt=\"npm version\" />\n  \u003C/a>\n  \u003Ca href=\"https://github.com/yowainwright/prisma-migrations\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \u003Cimg src=\"https://img.shields.io/github/stars/yowainwright/prisma-migrations?style=social\" alt=\"GitHub stars\" />\n  \u003C/a>\n  \u003Ca href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \u003Cimg src=\"https://img.shields.io/badge/TypeScript-Ready-blue\" alt=\"TypeScript Ready\" />\n  \u003C/a>\n  \u003Ca href=\"https://opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \u003Cimg src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\" />\n  \u003C/a>\n\u003C/div>\n\n## What is Prisma Migrations?\n\nPrisma Migrations adds the rollback functionality and programmatic control that Prisma's native migrations lack, while maintaining 100% compatibility with Prisma's standard migration system. Write your migrations in TypeScript or JavaScript with full type safety and run them from your code.\n\n## Why Prisma Migrations?\n\n### The Problem\n\nPrisma's native `prisma migrate` is excellent for forward migrations, but has critical limitations:\n\n- **No rollback support**: Once a migration is applied, there's no built-in way to undo it\n- **No programmatic API**: You can't run migrations from your JavaScript runtime code\n- **Limited control**: Can't run specific numbers of migrations or interactive selection\n- **SQL-only migrations**: No way to write migrations in TypeScript/JavaScript with type safety\n\nWhen you need to rollback a migration in production or run migrations programmatically during deployment, you're stuck with manual SQL or third-party tools that don't integrate with Prisma.\n\n### The Solution\n\nPrisma Migrations extends Prisma with powerful features while staying 100% compatible:\n\n```typescript\n// Write migrations in TypeScript with full type safety\nimport type { PrismaClient } from 'prisma-migrations';\n\nexport async function up(prisma: PrismaClient) {\n  await prisma.$executeRaw`\n    CREATE TABLE users (\n      id SERIAL PRIMARY KEY,\n      email VARCHAR(255) UNIQUE NOT NULL,\n      name VARCHAR(255),\n      created_at TIMESTAMP DEFAULT NOW()\n    )\n  `;\n}\n\nexport async function down(prisma: PrismaClient) {\n  await prisma.$executeRaw`DROP TABLE IF EXISTS users`;\n}\n```\n\nRun migrations from your code:\n\n```typescript\nimport { Migrations } from 'prisma-migrations';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\nconst migrations = new Migrations(prisma);\n\n// Run all pending migrations\nawait migrations.up();\n\n// Rollback last migration\nawait migrations.down();\n```\n\nOr use the CLI:\n\n```bash\n# Run migrations\nnpx prisma-migrations up\n\n# Rollback migrations\nnpx prisma-migrations down\n\n# Interactive mode\nnpx prisma-migrations up --interactive\n```\n\n## Key Features\n\n- **Rollback migrations**: Full `up` and `down` migration support\n- **TypeScript/JavaScript migrations**: Write migrations in TS/JS with full type safety\n- **Programmatic API**: Run migrations from your Node.js code\n- **Prisma compatible**: Uses Prisma's standard `_prisma_migrations` table\n- **Step control**: Run or rollback specific numbers of migrations\n- **Interactive mode**: Select which migrations to apply\n- **Zero configuration**: Works out of the box with any Prisma project\n\n## Benefits\n\n- **Safe deployments**: Rollback problematic migrations in production\n- **Type safety**: Full TypeScript support for migration code\n- **Flexibility**: Run migrations programmatically during CI/CD or app startup\n- **Compatible**: Works alongside `prisma migrate` commands\n- **Developer enhanced**: Interactive mode for development workflows","src/content/docs/introduction.mdx","80ad40711989381d","introduction.mdx","setup",{"id":30,"data":32,"body":35,"filePath":36,"digest":37,"legacyId":38,"deferredRender":20},{"title":33,"description":34},"Installation & Quick Start","Get started with Prisma Migrations in minutes","\u003Csection>\n\n## Installation\n\nInstall Prisma Migrations in your project:\n\n```bash\nnpm install prisma-migrations\n```\n\n## Quick Start\n\n### 1. Initialize Your Migrations\n\nCreate your first migration file:\n\n```bash\nnpx prisma-migrations init\n```\n\nThis creates a migration directory structure:\n\n```bash\nprisma/migrations/\n└── [timestamp]_initial_migration/\n    └── migration.ts\n```\n\n### 2. Create a Migration\n\nGenerate a new migration file:\n\n```bash\nnpx prisma-migrations create add_users_table\n```\n\nThis creates:\n\n```bash\nprisma/migrations/\n└── [timestamp]_add_users_table/\n    └── migration.ts\n```\n\n### 3. Write Your Migration\n\nEdit the generated migration file with TypeScript:\n\n```typescript\n// prisma/migrations/[timestamp]_add_users_table/migration.ts\nimport type { PrismaClient } from 'prisma-migrations';\n\nexport async function up(prisma: PrismaClient) {\n  await prisma.$executeRaw`\n    CREATE TABLE users (\n      id SERIAL PRIMARY KEY,\n      email VARCHAR(255) UNIQUE NOT NULL,\n      name VARCHAR(255),\n      created_at TIMESTAMP DEFAULT NOW()\n    )\n  `;\n}\n\nexport async function down(prisma: PrismaClient) {\n  await prisma.$executeRaw`DROP TABLE IF EXISTS users`;\n}\n```\n\n### 4. Run Migrations\n\nApply all pending migrations:\n\n```bash\nnpx prisma-migrations up\n```\n\n### 5. Rollback (When Needed)\n\nUndo the last migration:\n\n```bash\nnpx prisma-migrations down\n```\n\nRoll back multiple migrations:\n\n```bash\nnpx prisma-migrations down --steps 3\n```\n\n## Using with Existing Prisma Projects\n\nPrisma Migrations works seamlessly with existing Prisma projects! It uses the same `_prisma_migrations` table that Prisma's native migrations use.\n\n### If You Already Have Migrations\n\nYou can add Prisma Migrations to an existing project:\n\n1. Install the package\n2. Run `npx prisma-migrations status` to see existing migrations\n3. Create new migrations with `npx prisma-migrations create`\n4. Your new migrations will work alongside existing Prisma migrations\n\n### Compatibility\n\n- Uses Prisma's standard `_prisma_migrations` table\n- Works with `prisma migrate` commands\n- No conflicts with existing migration workflows\n- Fully compatible with Prisma Client\n\n## Next Steps\n\n- Learn about [CLI commands](/prisma-migrations/docs/api-reference) for migration management\n- Explore [programmatic API](/prisma-migrations/docs/api-reference#programmatic-api) for running migrations from code\n- See [advanced features](/prisma-migrations/docs/advanced-features) like interactive mode and step control\n- Check [troubleshooting](/prisma-migrations/docs/troubleshooting) for common issues\n\n---\n\n\u003C/section>","src/content/docs/setup.mdx","7ebac9ac60a16526","setup.mdx","workspaces",{"id":39,"data":41,"body":44,"filePath":45,"digest":46,"legacyId":47,"deferredRender":20},{"title":42,"description":43},"Writing Migrations","Learn how to write effective database migrations with Prisma Migrations","This guide covers how to write migrations in TypeScript or JavaScript with full type safety.\n\n## Migration File Structure\n\nEach migration is stored in its own directory with a `migration.ts` (or `migration.js`) file:\n\n```bash\nprisma/migrations/\n└── [timestamp]_migration_name/\n    └── migration.ts\n```\n\nThe migration file exports two functions:\n- `up()` - Applies the migration\n- `down()` - Rolls back the migration\n\n## Basic Migration Template\n\n### TypeScript\n\n```typescript\nimport type { PrismaClient } from 'prisma-migrations';\n\nexport async function up(prisma: PrismaClient) {\n  // Your migration code here\n}\n\nexport async function down(prisma: PrismaClient) {\n  // Your rollback code here\n}\n```\n\n### JavaScript\n\n```javascript\nexports.up = async function(prisma) {\n  // Your migration code here\n};\n\nexports.down = async function(prisma) {\n  // Your rollback code here\n};\n```\n\n## Writing SQL Migrations\n\nUse `$executeRaw` for SQL statements:\n\n```typescript\nimport type { PrismaClient } from 'prisma-migrations';\n\nexport async function up(prisma: PrismaClient) {\n  await prisma.$executeRaw`\n    CREATE TABLE users (\n      id SERIAL PRIMARY KEY,\n      email VARCHAR(255) UNIQUE NOT NULL,\n      name VARCHAR(255),\n      created_at TIMESTAMP DEFAULT NOW()\n    )\n  `;\n}\n\nexport async function down(prisma: PrismaClient) {\n  await prisma.$executeRaw`DROP TABLE IF EXISTS users`;\n}\n```\n\n## Using Prisma Client Operations\n\nYou can use any Prisma Client method in migrations:\n\n```typescript\nimport type { PrismaClient } from 'prisma-migrations';\n\nexport async function up(prisma: PrismaClient) {\n  // Create table with raw SQL\n  await prisma.$executeRaw`\n    CREATE TABLE users (\n      id SERIAL PRIMARY KEY,\n      email VARCHAR(255) UNIQUE NOT NULL,\n      role VARCHAR(50) DEFAULT 'user'\n    )\n  `;\n\n  // Seed initial data using Prisma Client\n  await prisma.user.createMany({\n    data: [\n      { email: 'admin@example.com', role: 'admin' },\n      { email: 'user@example.com', role: 'user' },\n    ],\n  });\n}\n\nexport async function down(prisma: PrismaClient) {\n  await prisma.$executeRaw`DROP TABLE IF EXISTS users`;\n}\n```\n\n## Common Migration Patterns\n\n### Creating Tables\n\n```typescript\nexport async function up(prisma: PrismaClient) {\n  await prisma.$executeRaw`\n    CREATE TABLE posts (\n      id SERIAL PRIMARY KEY,\n      title VARCHAR(255) NOT NULL,\n      content TEXT,\n      author_id INTEGER REFERENCES users(id),\n      published BOOLEAN DEFAULT false,\n      created_at TIMESTAMP DEFAULT NOW(),\n      updated_at TIMESTAMP DEFAULT NOW()\n    )\n  `;\n\n  // Create indexes\n  await prisma.$executeRaw`\n    CREATE INDEX idx_posts_author_id ON posts(author_id)\n  `;\n\n  await prisma.$executeRaw`\n    CREATE INDEX idx_posts_published ON posts(published)\n  `;\n}\n\nexport async function down(prisma: PrismaClient) {\n  await prisma.$executeRaw`DROP TABLE IF EXISTS posts`;\n}\n```\n\n### Adding Columns\n\n```typescript\nexport async function up(prisma: PrismaClient) {\n  await prisma.$executeRaw`\n    ALTER TABLE users\n    ADD COLUMN last_login TIMESTAMP\n  `;\n\n  await prisma.$executeRaw`\n    ALTER TABLE users\n    ADD COLUMN is_active BOOLEAN DEFAULT true\n  `;\n}\n\nexport async function down(prisma: PrismaClient) {\n  await prisma.$executeRaw`\n    ALTER TABLE users\n    DROP COLUMN last_login\n  `;\n\n  await prisma.$executeRaw`\n    ALTER TABLE users\n    DROP COLUMN is_active\n  `;\n}\n```\n\n### Modifying Columns\n\n```typescript\nexport async function up(prisma: PrismaClient) {\n  // Change column type\n  await prisma.$executeRaw`\n    ALTER TABLE users\n    ALTER COLUMN email TYPE TEXT\n  `;\n\n  // Add constraint\n  await prisma.$executeRaw`\n    ALTER TABLE users\n    ALTER COLUMN name SET NOT NULL\n  `;\n\n  // Set default value\n  await prisma.$executeRaw`\n    ALTER TABLE users\n    ALTER COLUMN role SET DEFAULT 'member'\n  `;\n}\n\nexport async function down(prisma: PrismaClient) {\n  await prisma.$executeRaw`\n    ALTER TABLE users\n    ALTER COLUMN email TYPE VARCHAR(255)\n  `;\n\n  await prisma.$executeRaw`\n    ALTER TABLE users\n    ALTER COLUMN name DROP NOT NULL\n  `;\n\n  await prisma.$executeRaw`\n    ALTER TABLE users\n    ALTER COLUMN role DROP DEFAULT\n  `;\n}\n```\n\n### Data Migrations\n\n```typescript\nexport async function up(prisma: PrismaClient) {\n  // Migrate existing data\n  const users = await prisma.$queryRaw`\n    SELECT id, name FROM users WHERE email IS NULL\n  `;\n\n  for (const user of users) {\n    await prisma.$executeRaw`\n      UPDATE users\n      SET email = ${`${user.name}@example.com`}\n      WHERE id = ${user.id}\n    `;\n  }\n\n  // Now make email required\n  await prisma.$executeRaw`\n    ALTER TABLE users\n    ALTER COLUMN email SET NOT NULL\n  `;\n}\n\nexport async function down(prisma: PrismaClient) {\n  await prisma.$executeRaw`\n    ALTER TABLE users\n    ALTER COLUMN email DROP NOT NULL\n  `;\n}\n```\n\n### Creating Indexes\n\n```typescript\nexport async function up(prisma: PrismaClient) {\n  await prisma.$executeRaw`\n    CREATE INDEX idx_users_email ON users(email)\n  `;\n\n  await prisma.$executeRaw`\n    CREATE INDEX idx_users_created_at ON users(created_at)\n  `;\n\n  // Unique index\n  await prisma.$executeRaw`\n    CREATE UNIQUE INDEX idx_users_username ON users(username)\n  `;\n}\n\nexport async function down(prisma: PrismaClient) {\n  await prisma.$executeRaw`DROP INDEX IF EXISTS idx_users_email`;\n  await prisma.$executeRaw`DROP INDEX IF EXISTS idx_users_created_at`;\n  await prisma.$executeRaw`DROP INDEX IF EXISTS idx_users_username`;\n}\n```\n\n## Best Practices\n\n### 1. Always Write Down Migrations\n\nEvery `up()` should have a corresponding `down()` that reverses it:\n\n```typescript\n// ✓ Good\nexport async function up(prisma: PrismaClient) {\n  await prisma.$executeRaw`CREATE TABLE foo (...)`;\n}\n\nexport async function down(prisma: PrismaClient) {\n  await prisma.$executeRaw`DROP TABLE IF EXISTS foo`;\n}\n\n// ✗ Bad - Empty down function\nexport async function down(prisma: PrismaClient) {\n  // Nothing here!\n}\n```\n\n### 2. Use Transactions for Complex Migrations\n\n```typescript\nexport async function up(prisma: PrismaClient) {\n  await prisma.$transaction(async (tx) => {\n    await tx.$executeRaw`CREATE TABLE foo (id SERIAL PRIMARY KEY)`;\n    await tx.$executeRaw`CREATE TABLE bar (id SERIAL PRIMARY KEY)`;\n    await tx.$executeRaw`ALTER TABLE bar ADD FOREIGN KEY (foo_id) REFERENCES foo(id)`;\n  });\n}\n```\n\n### 3. Handle Data Migrations Safely\n\n```typescript\nexport async function up(prisma: PrismaClient) {\n  // Get existing data\n  const users = await prisma.user.findMany();\n\n  // Transform and update\n  for (const user of users) {\n    if (!user.displayName) {\n      await prisma.user.update({\n        where: { id: user.id },\n        data: { displayName: user.email.split('@')[0] }\n      });\n    }\n  }\n}\n```\n\n### 4. Use Descriptive Migration Names\n\n```bash\n# ✓ Good\nnpx prisma-migrations create add_user_email_verification\nnpx prisma-migrations create modify_posts_add_published_at\n\n# ✗ Bad\nnpx prisma-migrations create update\nnpx prisma-migrations create changes\n```\n\n### 5. Test Migrations Thoroughly\n\nTest both up and down:\n\n```bash\n# Test up\nnpx prisma-migrations up\n\n# Verify changes\npsql -d mydb -c \"\\d users\"\n\n# Test down\nnpx prisma-migrations down\n\n# Verify rollback\npsql -d mydb -c \"\\d users\"\n```\n\n## Advanced Patterns\n\n### Conditional Migrations\n\n```typescript\nexport async function up(prisma: PrismaClient) {\n  // Check if column exists\n  const result = await prisma.$queryRaw`\n    SELECT column_name\n    FROM information_schema.columns\n    WHERE table_name='users' AND column_name='email'\n  `;\n\n  if (result.length === 0) {\n    await prisma.$executeRaw`\n      ALTER TABLE users ADD COLUMN email VARCHAR(255)\n    `;\n  }\n}\n```\n\n### Multi-Step Migrations\n\n```typescript\nexport async function up(prisma: PrismaClient) {\n  // Step 1: Add new column\n  await prisma.$executeRaw`\n    ALTER TABLE users ADD COLUMN new_email VARCHAR(255)\n  `;\n\n  // Step 2: Copy data\n  await prisma.$executeRaw`\n    UPDATE users SET new_email = old_email\n  `;\n\n  // Step 3: Drop old column\n  await prisma.$executeRaw`\n    ALTER TABLE users DROP COLUMN old_email\n  `;\n\n  // Step 4: Rename new column\n  await prisma.$executeRaw`\n    ALTER TABLE users RENAME COLUMN new_email TO email\n  `;\n}\n\nexport async function down(prisma: PrismaClient) {\n  // Reverse all steps\n  await prisma.$executeRaw`\n    ALTER TABLE users RENAME COLUMN email TO new_email\n  `;\n\n  await prisma.$executeRaw`\n    ALTER TABLE users ADD COLUMN old_email VARCHAR(255)\n  `;\n\n  await prisma.$executeRaw`\n    UPDATE users SET old_email = new_email\n  `;\n\n  await prisma.$executeRaw`\n    ALTER TABLE users DROP COLUMN new_email\n  `;\n}\n```\n\n### Environment-Specific Logic\n\n```typescript\nexport async function up(prisma: PrismaClient) {\n  const isDev = process.env.NODE_ENV === 'development';\n\n  await prisma.$executeRaw`CREATE TABLE users (id SERIAL PRIMARY KEY)`;\n\n  // Seed data in development only\n  if (isDev) {\n    await prisma.user.createMany({\n      data: [\n        { email: 'dev@example.com' },\n        { email: 'test@example.com' }\n      ]\n    });\n  }\n}\n```\n\n## Database-Specific Examples\n\n### PostgreSQL\n\n```typescript\n// JSON columns\nawait prisma.$executeRaw`\n  ALTER TABLE users ADD COLUMN metadata JSONB DEFAULT '{}'\n`;\n\n// Arrays\nawait prisma.$executeRaw`\n  ALTER TABLE users ADD COLUMN tags TEXT[] DEFAULT ARRAY[]::TEXT[]\n`;\n\n// Full-text search\nawait prisma.$executeRaw`\n  ALTER TABLE posts ADD COLUMN search_vector TSVECTOR\n`;\n\nawait prisma.$executeRaw`\n  CREATE INDEX idx_posts_search ON posts USING GIN(search_vector)\n`;\n```\n\n### MySQL\n\n```typescript\n// JSON columns\nawait prisma.$executeRaw`\n  ALTER TABLE users ADD COLUMN metadata JSON\n`;\n\n// Fulltext index\nawait prisma.$executeRaw`\n  ALTER TABLE posts ADD FULLTEXT INDEX idx_posts_content (content)\n`;\n```\n\n## Troubleshooting\n\n### Migration Failed Mid-Way\n\nIf a migration fails partway through:\n\n1. Check your database state\n2. Fix the migration code\n3. Either:\n   - Manually clean up partial changes and retry\n   - Or write a new migration to continue from current state\n\n### Type Errors\n\nIf you get TypeScript errors, ensure you're importing the correct PrismaClient type:\n\n```typescript\n// ✓ Correct\nimport type { PrismaClient } from 'prisma-migrations';\n\n// ✗ Wrong\nimport { PrismaClient } from '@prisma/client';\n```\n\n### Down Migration Doesn't Work\n\nMake sure your down() properly reverses up():\n\n```typescript\n// Test both directions\nawait migrations.up();\nawait migrations.down();\nawait migrations.up(); // Should work again\n```\n\n## Next Steps\n\n- Learn about [Advanced Features](/prisma-migrations/docs/advanced-features) like interactive mode\n- Explore the [API Reference](/prisma-migrations/docs/api-reference) for programmatic usage\n- Check [Troubleshooting](/prisma-migrations/docs/troubleshooting) for common issues","src/content/docs/workspaces.mdx","a9290562df13faba","workspaces.mdx"]