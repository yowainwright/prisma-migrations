[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.14.8","content-config-digest","262e19c900bdc416","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://jeffry.in\",\"compressHTML\":true,\"base\":\"/prisma-migrations\",\"trailingSlash\":\"never\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true,\"allowedDomains\":[]},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false,\"failOnPrerenderConflict\":false},\"legacy\":{\"collections\":false}}","docs",["Map",11,12,21,22,30,31,39,40,48,49,57,58,66,67,75,76],"advanced-features",{"id":11,"data":13,"body":16,"filePath":17,"digest":18,"legacyId":19,"deferredRender":20},{"title":14,"description":15},"Advanced Features","Deep dive into pastoralist's advanced capabilities","Pastoralist includes several advanced features that make dependency override management more powerful and maintainable.\n\n## Patch Support\n\nPastoralist automatically detects and tracks patches created by tools like `patch-package`.\n\n### How It Works\n\nWhen you have patches in your `patches/` directory:\n\n```\npatches/\n├── lodash+4.17.21.patch\n├── express+4.18.0.patch\n└── react+18.2.0.patch\n```\n\nPastoralist will track them in the appendix:\n\n```json\n{\n  \"pastoralist\": {\n    \"appendix\": {\n      \"lodash@4.17.21\": {\n        \"dependents\": {\n          \"my-app\": \"lodash@^4.17.0\"\n        },\n        \"patches\": [\"patches/lodash+4.17.21.patch\"]\n      }\n    }\n  }\n}\n```\n\n### Benefits\n\n- **Visibility**: See which overrides have patches applied\n- **Cleanup Detection**: Get notified about unused patches\n- **Documentation**: Understand why patches exist alongside overrides\n\n### Unused Patch Detection\n\nWhen a dependency is removed, pastoralist alerts you:\n\n```\n🐑 Found 2 potentially unused patch files:\n  - patches/old-package+1.0.0.patch\n  - patches/removed-dep+2.0.0.patch\nConsider removing these patches if the packages are no longer used.\n```\n\n## PeerDependencies Support\n\nPastoralist now considers `peerDependencies` when tracking override usage.\n\n### Example\n\n```json\n{\n  \"peerDependencies\": {\n    \"react\": \"^17.0.0 || ^18.0.0\"\n  },\n  \"overrides\": {\n    \"react\": \"18.2.0\"\n  }\n}\n```\n\nThe appendix will reflect peer dependency requirements:\n\n```json\n{\n  \"pastoralist\": {\n    \"appendix\": {\n      \"react@18.2.0\": {\n        \"dependents\": {\n          \"my-component\": \"react@^17.0.0 || ^18.0.0\"\n        }\n      }\n    }\n  }\n}\n```\n\n## Smart Cleanup\n\nPastoralist intelligently removes overrides that are no longer needed.\n\n### Automatic Removal\n\nWhen a dependency is updated and no longer needs an override:\n\n**Before:**\n```json\n{\n  \"dependencies\": {\n    \"lodash\": \"^4.17.0\"\n  },\n  \"overrides\": {\n    \"lodash\": \"4.17.21\"\n  }\n}\n```\n\n**After updating lodash to 4.17.21:**\n```json\n{\n  \"dependencies\": {\n    \"lodash\": \"^4.17.21\"\n  },\n  \"overrides\": {}\n}\n```\n\n### Transitive Dependency Tracking\n\nPastoralist tracks overrides needed by transitive dependencies:\n\n```json\n{\n  \"pastoralist\": {\n    \"appendix\": {\n      \"minimist@1.2.8\": {\n        \"dependents\": {\n          \"mkdirp\": \"minimist@^1.2.6\",\n          \"optimist\": \"minimist@~1.2.0\"\n        }\n      }\n    }\n  }\n}\n```\n\n## Fuzzy Version Matching\n\nPastoralist intelligently matches version ranges to determine if overrides are needed.\n\n### How It Works\n\nGiven these dependencies:\n```json\n{\n  \"dependencies\": {\n    \"express\": \"^4.18.0\"\n  }\n}\n```\n\nAnd this override:\n```json\n{\n  \"overrides\": {\n    \"express\": \"4.18.2\"\n  }\n}\n```\n\nPastoralist understands that `^4.18.0` could resolve to `4.18.2` naturally, so the override might not be necessary unless it's fixing a specific issue.\n\n## Appendix Preservation\n\nThe appendix is preserved even when overrides are temporarily removed, maintaining historical context.\n\n### Example Scenario\n\n1. **Initial state**: Override with appendix\n2. **Dependency removed**: Override removed, appendix preserved\n3. **Dependency re-added**: Override can be restored with context\n\nThis helps teams understand the history of override decisions.\n\n## Multi-Format Support\n\nWhile pastoralist uses npm's `overrides` format, it understands conversions from:\n\n- **Yarn 1.x**: `resolutions`\n- **pnpm**: `pnpm.overrides`\n- **Yarn Berry**: `resolutions` with different syntax\n\n### Conversion Example\n\nFrom Yarn:\n```json\n{\n  \"resolutions\": {\n    \"package-a\": \"1.0.0\",\n    \"**/package-b\": \"2.0.0\"\n  }\n}\n```\n\nTo npm (what pastoralist uses):\n```json\n{\n  \"overrides\": {\n    \"package-a\": \"1.0.0\",\n    \"package-b\": \"2.0.0\"\n  }\n}\n```\n\n## Performance Optimizations\n\n### Caching\n\nPastoralist caches dependency trees during execution to avoid repeated file system reads.\n\n### Parallel Processing\n\nWhen using `--depPaths`, multiple package.json files are processed efficiently.\n\n### Minimal File Writes\n\nPackage.json is only rewritten if changes are detected, preserving timestamps and reducing unnecessary git changes.\n\n## Debug Mode Insights\n\nDebug mode (`--debug`) provides detailed information:\n\n```\n🐑 pastoralist checking herd...\n[DEBUG] Reading package.json from /path/to/package.json\n[DEBUG] Found 3 overrides\n[DEBUG] Analyzing dependency tree...\n[DEBUG] lodash@4.17.21 required by:\n  - express@4.18.0 (wants lodash@^4.17.0)\n  - custom-utils@1.0.0 (wants lodash@~4.17.0)\n[DEBUG] Writing updated package.json\n✅ pastoralist the herd is safe!\n```\n\n## Integration with Other Tools\n\n### patch-package\n\nPastoralist complements `patch-package` by tracking which overrides have associated patches:\n\n```bash\n# Apply a patch\nnpx patch-package lodash\n\n# Run pastoralist to update tracking\nnpx pastoralist\n```\n\n### npm-check-updates\n\nUse with `npm-check-updates` to manage both regular updates and overrides:\n\n```bash\n# Update dependencies\nnpx npm-check-updates -u\n\n# Update override tracking\nnpx pastoralist\n```\n\n### Renovate/Dependabot\n\nConfigure automated tools to run pastoralist after updates:\n\n```json\n{\n  \"postUpgradeTasks\": {\n    \"commands\": [\"npm install\", \"npx pastoralist\"],\n    \"fileFilters\": [\"package.json\"]\n  }\n}\n```\n\n## Custom Workflows\n\n### Override Policies\n\nCreate policies for when overrides should be used:\n\n```javascript\n// scripts/check-override-policy.js\nconst pkg = require('./package.json');\n\nconst policies = {\n  security: ['minimist', 'lodash'],  // Always override for security\n  compatibility: ['react'],           // Override for compatibility\n  temporary: ['experimental-pkg']     // Temporary overrides\n};\n\n// Validate overrides match policies\nObject.keys(pkg.overrides || {}).forEach(override => {\n  const category = Object.entries(policies)\n    .find(([_, pkgs]) => pkgs.includes(override))?.[0];\n    \n  if (!category) {\n    console.warn(`Override '${override}' has no policy!`);\n  }\n});\n```\n\n### Appendix Analysis\n\nExtract insights from the appendix:\n\n```javascript\nconst pkg = require('./package.json');\nconst appendix = pkg.pastoralist?.appendix || {};\n\n// Find overrides with most dependents\nconst overrideImpact = Object.entries(appendix)\n  .map(([override, info]) => ({\n    override,\n    dependentCount: Object.keys(info.dependents || {}).length\n  }))\n  .sort((a, b) => b.dependentCount - a.dependentCount);\n\nconsole.log('Highest impact overrides:', overrideImpact.slice(0, 5));\n```\n\n## Future-Proofing\n\nPastoralist is designed to adapt as package managers evolve:\n\n- **Version compatibility**: Handles different package.json formats\n- **Extensible appendix**: Room for additional metadata\n- **Backward compatibility**: Older versions can read newer appendixes\n\n## Best Practices\n\n1. **Regular Updates**: Run pastoralist regularly, ideally in postinstall\n2. **Review Patches**: Periodically review patches for upstream fixes\n3. **Document Policies**: Create clear policies for override usage\n4. **Monitor Impact**: Track which overrides affect the most packages\n5. **Clean Regularly**: Remove overrides as soon as they're not needed","src/content/docs/advanced-features.mdx","cd631939b382cf2e","advanced-features.mdx",true,"api-reference",{"id":21,"data":23,"body":26,"filePath":27,"digest":28,"legacyId":29,"deferredRender":20},{"title":24,"description":25},"API Reference","Complete reference for pastoralist CLI and Node.js API","Pastoralist provides both a CLI interface and a Node.js API for programmatic usage.\n\n## CLI\n\n### `pastoralist`\n\nRun pastoralist on the current directory's package.json.\n\n```bash\nnpx pastoralist\n```\n\n### `pastoralist --path \u003Cpath>`\n\nRun pastoralist on a specific package.json file.\n\n**params:**\n- `\u003Cpath>`: path to a package.json file\n\n```bash\n# Run on a specific package\nnpx pastoralist --path packages/app/package.json\n\n# Run on a nested project\nnpx pastoralist --path ./nested/project/package.json\n```\n\n### `pastoralist --depPaths [paths...]`\n\nRun pastoralist on multiple package.json files using glob patterns.\n\n**params:**\n- `[paths...]`: array of glob patterns\n\n```bash\n# Run on all packages in monorepo\nnpx pastoralist --depPaths \"packages/*/package.json\"\n\n# Run on multiple directories\nnpx pastoralist --depPaths \"packages/*/package.json\" \"apps/*/package.json\"\n```\n\n### `pastoralist --ignore [patterns...]`\n\nExclude files matching glob patterns.\n\n**params:**\n- `[patterns...]`: array of glob patterns to ignore\n\n```bash\n# Ignore test directories\nnpx pastoralist --ignore \"**/test/**\" \"**/dist/**\"\n\n# Ignore specific packages\nnpx pastoralist --depPaths \"**/*package.json\" --ignore \"**/node_modules/**\" \"**/legacy/**\"\n```\n\n### `pastoralist --root \u003Croot>`\n\nSet the root directory for all operations.\n\n**params:**\n- `\u003Croot>`: root directory path\n\n```bash\n# Run from different directory\nnpx pastoralist --root /path/to/project\n\n# Combine with other options\nnpx pastoralist --root ../my-project --path package.json\n```\n\n### `pastoralist --debug`\n\nEnable detailed debug output.\n\n```bash\n# Run with debug logging\nnpx pastoralist --debug\n\n# Debug specific package\nnpx pastoralist --path packages/app/package.json --debug\n```\n\n## Node.js API\n\n### Installation\n\n```bash\nnpm install pastoralist\n```\n\n### `update(options)`\n\nUpdate package.json overrides and manage the appendix.\n\n**params:**\n- `options`: configuration object (optional)\n  - `path`: path to package.json (default: './package.json')\n  - `depPaths`: array of glob patterns for multiple files\n  - `ignore`: array of glob patterns to ignore\n  - `root`: root directory path\n  - `debug`: enable debug logging\n\n```javascript\nimport { update } from 'pastoralist';\n\n// Basic usage\nawait update();\n\n// With specific path\nawait update({\n  path: './packages/app/package.json'\n});\n\n// With debug mode\nawait update({\n  debug: true\n});\n\n// Multiple packages\nawait update({\n  depPaths: ['packages/*/package.json'],\n  ignore: ['**/test/**']\n});\n```\n\n### `logger(config)`\n\nCreate a logger instance for custom debugging.\n\n**params:**\n- `config`: logger configuration\n  - `file`: source file name\n  - `isLogging`: enable/disable logging\n\n```javascript\nimport { logger } from 'pastoralist';\n\n// Create logger\nconst log = logger({\n  file: 'my-script.js',\n  isLogging: true\n});\n\n// Use logger\nlog.debug('method-name', 'action', { data: 'value' });\nlog.error('method-name', 'error', { error: err });\n```\n\n## Examples\n\n### Build Tool Integration\n\n```javascript\nimport { update } from 'pastoralist';\n\n// Ensure overrides are up-to-date before building\nawait update();\nconsole.log('✓ Package overrides verified');\n```\n\n### Workspace Automation\n\n```javascript\nimport { update } from 'pastoralist';\nimport glob from 'glob';\n\n// Update all workspace packages\nconst packages = glob.sync('packages/*/package.json');\n\nfor (const pkgPath of packages) {\n  await update({ path: pkgPath });\n  console.log(`✓ Updated ${pkgPath}`);\n}\n```\n\n### CI/CD Validation\n\n```javascript\nimport { update } from 'pastoralist';\nimport { execSync } from 'child_process';\n\n// Check if overrides are up-to-date\nconst before = execSync('git status --porcelain').toString();\nawait update();\nconst after = execSync('git status --porcelain').toString();\n\nif (before !== after) {\n  console.error('❌ Package.json overrides need updating');\n  process.exit(1);\n}\n```\n\n### Custom Logger\n\n```javascript\nimport { update, logger } from 'pastoralist';\n\n// Create custom logger\nconst log = logger({\n  file: 'my-script.js',\n  isLogging: process.env.DEBUG === 'true'\n});\n\n// Log custom events\nlog.debug('custom-action', 'starting', { time: Date.now() });\n\nawait update({ debug: true });\n\nlog.debug('custom-action', 'completed', { time: Date.now() });\n```\n\n### Error Handling\n\n```javascript\nimport { update } from 'pastoralist';\n\ntry {\n  await update({ path: './package.json' });\n} catch (error) {\n  if (error.code === 'ENOENT') {\n    console.error('Package.json not found');\n  } else {\n    console.error('Unexpected error:', error);\n  }\n}\n```\n\n## Environment Variables\n\n### `DEBUG=pastoralist*`\n\nEnable debug output (equivalent to --debug flag).\n\n```bash\nDEBUG=pastoralist* npx pastoralist\n```\n\n## TypeScript\n\nPastoralist includes full TypeScript support.\n\n```typescript\nimport { update, Options } from 'pastoralist';\n\nconst options: Options = {\n  path: './package.json',\n  debug: true\n};\n\nawait update(options);\n```","src/content/docs/api-reference.mdx","d79c44bbf4629d36","api-reference.mdx","codelab",{"id":30,"data":32,"body":35,"filePath":36,"digest":37,"legacyId":38,"deferredRender":20},{"title":33,"description":34},"Interactive Codelab","Learn how pastoralist works through hands-on examples","Welcome to the pastoralist interactive codelab! This hands-on tutorial will help you understand how pastoralist manages your package.json overrides and resolutions through real examples you can run in your browser.\n\n## What You'll Learn\n\nIn this codelab, you'll discover:\n- 📝 How pastoralist documents your overrides\n- 🧹 Automatic cleanup of unnecessary overrides\n- 🔍 Dependency tracking and visualization\n- 🚀 Integration into your workflow\n\n## Before You Begin\n\n### The Problem\n\nWhen using npm overrides or yarn resolutions, it's easy to:\n- Forget why an override was added\n- Leave outdated overrides in place\n- Not know which packages depend on the override\n- Accumulate technical debt over time\n\n### The Solution\n\nPastoralist automatically:\n- Creates an appendix documenting each override\n- Shows which packages require each override\n- Removes overrides that are no longer needed\n- Runs automatically via postinstall hooks\n\n## Live Demo\n\nTry pastoralist right in your browser! Since pastoralist requires a Node.js environment to analyze dependencies, you can:\n\n1. **Run locally**: Copy the examples below and try them in your own project\n2. **Create a demo**: Use our demo script to generate a working example\n\n### Quick Demo Setup\n\n```bash\n# Clone and run the demo\ngit clone https://github.com/yowainwright/pastoralist.git\ncd pastoralist/demo\nnode create-demo.js generate\n```\n\nOr create a minimal demo in your project:\n\n```bash\n# 1. Create a test directory\nmkdir pastoralist-test && cd pastoralist-test\n\n# 2. Create package.json with overrides\ncat > package.json \u003C\u003C 'EOF'\n{\n  \"name\": \"pastoralist-test\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"lodash\": \"^4.17.21\",\n    \"express\": \"^4.18.0\"\n  },\n  \"overrides\": {\n    \"lodash\": \"4.17.20\"\n  }\n}\nEOF\n\n# 3. Install dependencies\nnpm install\n\n# 4. Install and run pastoralist\nnpm install --save-dev pastoralist\nnpx pastoralist\n\n# 5. Check the result\ncat package.json\n```\n\nYou'll see pastoralist has added an appendix showing why the lodash override exists!\n\n## Step-by-Step Tutorial\n\n### Step 1: Understanding the Initial State\n\nLet's start with a typical package.json that has overrides:\n\n```json\n{\n  \"name\": \"my-app\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"lodash\": \"^4.17.21\",\n    \"react\": \"^18.2.0\",\n    \"express\": \"^4.18.0\"\n  },\n  \"overrides\": {\n    \"lodash\": \"4.17.20\",\n    \"react\": \"18.1.0\"\n  }\n}\n```\n\n**Question:** Why are these overrides here? Which packages need them? When can they be removed?\n\nWithout pastoralist, these questions are difficult to answer.\n\n### Step 2: Running Pastoralist\n\nInstall and run pastoralist:\n\n**npm:**\n```bash\nnpm install --save-dev pastoralist\nnpx pastoralist\n```\n\n**yarn:**\n```bash\nyarn add -D pastoralist\nyarn pastoralist\n```\n\n**pnpm:**\n```bash\npnpm add -D pastoralist\npnpm pastoralist\n```\n\n### Step 3: Understanding the Output\n\nAfter running pastoralist, your package.json now includes an appendix:\n\n```json\n{\n  \"overrides\": {\n    \"lodash\": \"4.17.20\",\n    \"react\": \"18.1.0\"\n  },\n  \"pastoralist\": {\n    \"appendix\": {\n      \"lodash@4.17.20\": {\n        \"dependents\": {\n          \"express\": \"^4.18.0\"\n        }\n      },\n      \"react@18.1.0\": {\n        \"dependents\": {\n          \"some-ui-lib\": \"^2.0.0\"\n        }\n      }\n    }\n  }\n}\n```\n\nNow you can see:\n- ✅ `lodash@4.17.20` is needed by `express`\n- ✅ `react@18.1.0` is needed by `some-ui-lib`\n- ✅ Each override is documented with its purpose\n\n### Step 4: Automatic Cleanup\n\nLet's say you update `express` to a version that no longer needs the lodash override. When you run pastoralist again:\n\n**Before:**\n```json\n\"overrides\": {\n  \"lodash\": \"4.17.20\",\n  \"react\": \"18.1.0\"\n}\n```\n\n**After:**\n```json\n\"overrides\": {\n  \"react\": \"18.1.0\"\n}\n```\n\nPastoralist automatically:\n- 🧹 Removed the unnecessary `lodash` override\n- 📝 Updated the appendix accordingly\n- ✨ Kept your package.json clean\n\n### Step 5: Patch Support\n\nPastoralist also tracks patches from tools like `patch-package`:\n\n```json\n\"pastoralist\": {\n  \"appendix\": {\n    \"lodash@4.17.21\": {\n      \"dependents\": {\n        \"my-app\": \"lodash@^4.17.0\"\n      },\n      \"patches\": [\"patches/lodash+4.17.21.patch\"]\n    }\n  }\n}\n```\n\nWhen a patched dependency is no longer needed, pastoralist will notify you:\n\n```\n🐑 Found 1 potentially unused patch file:\n  - patches/lodash+4.17.21.patch\nConsider removing this patch if the package is no longer used.\n```\n\n## Integration Best Practices\n\n### 1. Automatic Execution\n\nAdd pastoralist to your postinstall script:\n\n```json\n{\n  \"scripts\": {\n    \"postinstall\": \"pastoralist\"\n  }\n}\n```\n\nThis ensures overrides are managed automatically after every install.\n\n### 2. CI/CD Integration\n\nInclude pastoralist in your CI pipeline:\n\n```yaml\n# .github/workflows/ci.yml\n- name: Check overrides\n  run: |\n    npx pastoralist\n    git diff --exit-code package.json\n```\n\n### 3. Workspace Support\n\nFor monorepos, run pastoralist on specific packages:\n\n```bash\n# Root package\npastoralist\n\n# Specific workspace\npastoralist --path packages/app/package.json\n```\n\n## Try It Yourself\n\n### Exercise 1: Add an Override\n\n1. In the StackBlitz demo above, add a new override to package.json\n2. Run `npm run run-pastoralist`\n3. Observe how the appendix is updated\n\n### Exercise 2: Remove a Dependency\n\n1. Remove a dependency that has an override\n2. Run pastoralist again\n3. Watch the override get cleaned up automatically\n\n### Exercise 3: Explore Edge Cases\n\n1. What happens with nested dependencies?\n2. How are version ranges handled?\n3. What about peer dependencies?\n\n## Advanced Features\n\n### Custom Configuration\n\nWhile pastoralist works with zero config, you can customize its behavior:\n\n```json\n{\n  \"pastoralist\": {\n    \"preserveUnused\": false,\n    \"includeDevDependencies\": true\n  }\n}\n```\n\n### Programmatic API\n\nUse pastoralist in your scripts:\n\n```javascript\nimport { runPastoralist } from 'pastoralist';\n\nawait runPastoralist({\n  path: './package.json',\n  silent: false\n});\n```\n\n## Common Scenarios\n\n### Security Patches\n\nWhen applying security patches via overrides:\n\n```json\n\"overrides\": {\n  \"minimist\": \"1.2.6\"\n}\n```\n\nPastoralist helps track when the security fix is incorporated upstream and the override can be removed.\n\n### Breaking Changes\n\nManaging major version differences:\n\n```json\n\"overrides\": {\n  \"react\": \"17.0.2\"\n}\n```\n\nThe appendix shows which packages aren't ready for React 18 yet.\n\n### Transitive Dependencies\n\nFixing deeply nested dependency issues becomes transparent with pastoralist's dependency tracking.\n\n## Next Steps\n\nNow that you understand how pastoralist works:\n\n1. **Install it** in your project: `npm install --save-dev pastoralist`\n2. **Add it** to postinstall: `\"postinstall\": \"pastoralist\"`\n3. **Run it** to see your current override usage: `npx pastoralist`\n4. **Share** the appendix with your team for better visibility\n\n## Resources\n\n- [GitHub Repository](https://github.com/yowainwright/pastoralist)\n- [npm Package](https://www.npmjs.com/package/pastoralist)\n- [Full Documentation](/docs/introduction)\n- [Architecture Details](/docs/architecture)\n\n## Get Help\n\nHaving issues? Here's how to get help:\n\n- 🐛 [Report bugs](https://github.com/yowainwright/pastoralist/issues)\n- 💬 [Start a discussion](https://github.com/yowainwright/pastoralist/discussions)\n- 📚 [Read the FAQ](#)\n\n---\n\n**Ready to take control of your overrides?** Jump back to the [live demo](#live-demo) and start experimenting!","src/content/docs/codelab.mdx","36e2f101038c6d74","codelab.mdx","setup",{"id":39,"data":41,"body":44,"filePath":45,"digest":46,"legacyId":47,"deferredRender":20},{"title":42,"description":43},"Setup","Quick and easy setup guide for Pastoralist CLI","\u003Csection>\n\n## Getting Started\n\n1. Install Pastoralist globally:\n   ```bash\n   bun add -g pastoralist\n   ```\n\n2. Run it in your project:\n   ```bash\n   pastoralist\n   ```\n\n3. That's it! Pastoralist will automatically:\n   - Scan for overrides and resolutions\n   - Check for updates\n   - Update your package.json\n   - Track everything in the appendix\n\n## Setup\n\nOkay! Hopefully the breakdowns above were clear enough on why you might want to use Pastoralist!\nPlease submit a [pull request](https://github.com/yowainwright/pastoralist/pulls) or [issue](https://github.com/yowainwright/pastoralist/issues) if it wasn't!\n\nNow for the super simple setup!\n\n1. Install\n\n```bash\nbun add pastoralist --dev\n# pastoralist does not expect to be a dependency! It's a tool!!!\n```\n\n2. run\n\n```bash\npastoralist\n# => That's it! Check out your package.json\n# Pastoralist will automatically detect and track:\n# - Overrides and resolutions\n# - Patches (from patch-package and similar tools)\n# - All dependency types (dependencies, devDependencies, peerDependencies)\n```\n\n3. (recommended) add Pastoralist to a postInstall script\n\n```js\n// package.json\n{\n  \"scripts\": {\n    \"postinstall\": \"pastoralist\"\n  }\n}\n```\n\nIn the near future, Pastoralist will fully support a config file but this is it for now!\n\nRead on to understand what is going on under the hood of Pastoralist!\n\n---\n\n\u003C/section>","src/content/docs/setup.mdx","dd4b2fa4688eb1de","setup.mdx","architecture",{"id":48,"data":50,"body":53,"filePath":54,"digest":55,"legacyId":56,"deferredRender":20},{"title":51,"description":52},"Architecture","Deep dive into how Pastoralist works, including overrides, resolutions, patches, and the object anatomy","import ReviewFlow from \"../../components/ReviewFlow\";\n\n## How Pastoralist Works\n\n\u003CReviewFlow client:load />\n\nPastoralist manages overrides, resolutions, and patches so you don't have to!\n\nIt is comprised of a few functions which read the root package.json file's overrides or resolutions and map the packages in them to a `pastoralist.appendix` object. Additionally, it automatically detects and tracks patches in your project (such as those created by `patch-package`).\n\nIf Pastoralist observes an override, resolution, or patch is no longer needed, it removes it from the respective objects and the pastoralist appendix object, and notifies you about unused patches.\n\nThis means with Pastoralist, your only concern is adding dependencies to the overrides and resolutions objects - patch tracking happens automatically.\n\n### Workspace Support\n\nIn workspace/monorepo setups, Pastoralist:\n- Reads the root package.json or project manifest file\n- Maps all overrides, resolutions, and patches to the `pastoralist.appendix` object\n- Updates dependencies across all workspaces\n- Maintains consistency throughout your monorepo\n\n## What Are Overrides, Resolutions, and Patches?\n\n### Overrides (npm)\n\nOverrides allow you to replace a package version in your dependency tree with a different version. This is npm's way of handling dependency conflicts:\n\n```json\n{\n  \"overrides\": {\n    \"foo\": \"1.0.0\",\n    \"bar\": {\n      \"baz\": \"1.0.0\"\n    }\n  }\n}\n```\n\n### Resolutions (Yarn)\n\nResolutions serve the same purpose for Yarn users, allowing you to force specific versions:\n\n```json\n{\n  \"resolutions\": {\n    \"foo\": \"1.0.0\",\n    \"**/bar/baz\": \"1.0.0\"\n  }\n}\n```\n\n### Patches\n\nPatches are custom modifications to node_modules packages, typically created with tools like `patch-package`. Pastoralist automatically detects and tracks these patches.\n\n## Object Anatomy\n\nThe Pastoralist object in your package.json provides full transparency into what's being managed:\n\n```json\n{\n  \"overrides\": {\n    \"minimist\": \"1.2.8\"\n  },\n  \"pastoralist\": {\n    \"appendix\": {\n      \"minimist\": {\n        \"key\": \"minimist\",\n        \"version\": \"1.2.8\",\n        \"parentKeys\": [\".\", \"mkdirp\"],\n        \"hasOverride\": true,\n        \"hasResolution\": false,\n        \"hasPatch\": false\n      }\n    }\n  }\n}\n```\n\n### Appendix Properties\n\n- **key**: The package name\n- **version**: Current override version\n- **parentKeys**: Where this dependency appears in your tree\n- **hasOverride**: Whether an npm override exists\n- **hasResolution**: Whether a Yarn resolution exists\n- **hasPatch**: Whether a patch file exists","src/content/docs/architecture.mdx","527b1ed14e1404d5","architecture.mdx","troubleshooting",{"id":57,"data":59,"body":62,"filePath":63,"digest":64,"legacyId":65,"deferredRender":20},{"title":60,"description":61},"Troubleshooting & FAQ","Common issues and frequently asked questions","## Frequently Asked Questions\n\n### What is pastoralist?\n\nPastoralist is a tool that automatically manages your npm overrides (or yarn resolutions) by creating an appendix that documents why each override exists and which packages depend on them.\n\n### Why do I need pastoralist?\n\nWithout pastoralist, it's easy to:\n- Forget why an override was added\n- Leave outdated overrides in your package.json\n- Not know which packages need specific overrides\n- Accumulate technical debt over time\n\n### Does pastoralist work with yarn/pnpm?\n\nPastoralist uses npm's `overrides` format. If you're using:\n- **Yarn 1.x**: Convert `resolutions` to `overrides`\n- **pnpm**: Convert `pnpm.overrides` to `overrides`\n- **Yarn Berry**: Use `resolutions` but consider converting\n\n### Is pastoralist safe to use?\n\nYes! Pastoralist:\n- Only modifies the `overrides` and `pastoralist` sections of package.json\n- Preserves all formatting and other fields\n- Creates backups in version control (through git)\n- Can be rolled back by removing the `pastoralist` section\n\n### When should overrides be used?\n\nUse overrides for:\n- Security patches before upstream updates\n- Compatibility issues between packages\n- Bug fixes not yet released\n- Temporary workarounds\n\n## Common Issues\n\n### Overrides Not Being Removed\n\n**Problem:** Pastoralist isn't removing overrides that seem unnecessary.\n\n**Solution:** The override might still be needed by a transitive dependency. Run with debug mode to see why:\n\n```bash\nnpx pastoralist --debug\n```\n\nLook for output showing which packages require the override.\n\n### Package.json Formatting Changes\n\n**Problem:** Pastoralist changes the formatting of my package.json.\n\n**Solution:** Pastoralist preserves formatting as much as possible. If you see changes:\n1. Ensure you're using the latest version\n2. Check if you have a `.prettierrc` or `.editorconfig` that might conflict\n3. Consider running a formatter after pastoralist\n\n### Patches Not Detected\n\n**Problem:** My patch files aren't being tracked in the appendix.\n\n**Solution:** Ensure patches follow the standard naming convention:\n```\npatches/\n├── package-name+1.0.0.patch    # Correct\n├── package-name@1.0.0.patch    # Incorrect\n└── custom-patch.patch          # Won't be detected\n```\n\n### Performance Issues\n\n**Problem:** Pastoralist takes a long time to run.\n\n**Solution:** For large monorepos:\n1. Run on specific packages instead of all at once\n2. Use `--ignore` to skip unnecessary directories\n3. Run packages in parallel:\n\n```bash\n# Instead of\npastoralist --depPaths \"**/*package.json\"\n\n# Try\nfind . -name \"package.json\" -not -path \"*/node_modules/*\" | \\\n  xargs -P 4 -I {} npx pastoralist --path {}\n```\n\n### Monorepo Override Conflicts\n\n**Problem:** Different packages in my monorepo need different versions.\n\n**Solution:** Use package-specific overrides:\n```json\n// root package.json - security patches only\n{\n  \"overrides\": {\n    \"minimist\": \"1.2.8\"\n  }\n}\n\n// packages/legacy-app/package.json - specific needs\n{\n  \"overrides\": {\n    \"react\": \"17.0.2\"\n  }\n}\n```\n\n### CI Failures\n\n**Problem:** CI fails saying package.json was modified.\n\n**Solution:** Run pastoralist locally and commit the changes:\n```bash\nnpx pastoralist\ngit add package.json\ngit commit -m \"Update override appendix\"\n```\n\nThen add to your CI check:\n```yaml\n- run: npx pastoralist\n- run: git diff --exit-code package.json\n```\n\n## Debug Mode\n\nEnable debug mode for detailed information:\n\n```bash\nnpx pastoralist --debug\n```\n\nDebug output includes:\n- Package resolution paths\n- Dependency tree analysis\n- Override usage detection\n- File operation details\n\n## Error Messages\n\n### \"Cannot find package.json\"\n\nPastoralist can't locate your package.json. Solutions:\n- Run from project root\n- Use `--path` to specify location\n- Check file permissions\n\n### \"Invalid package.json\"\n\nYour package.json has syntax errors. Validate with:\n```bash\nnpx json package.json\n```\n\n### \"No overrides found\"\n\nThis is normal if you don't have any overrides. Pastoralist will:\n- Clean up any existing appendix\n- Exit successfully\n\n## Best Practices\n\n### 1. Regular Updates\n\nRun pastoralist regularly:\n```json\n{\n  \"scripts\": {\n    \"postinstall\": \"pastoralist\"\n  }\n}\n```\n\n### 2. Document Override Reasons\n\nWhile pastoralist tracks what depends on overrides, consider adding comments:\n```json\n{\n  \"overrides\": {\n    \"lodash\": \"4.17.21\",  // CVE-2021-12345 fix\n    \"react\": \"17.0.2\"     // Legacy app compatibility\n  }\n}\n```\n\n### 3. Review Periodically\n\nSet reminders to review overrides:\n- Check if security patches are merged upstream\n- Test if compatibility issues are resolved\n- Remove overrides as soon as possible\n\n### 4. Monitor Patch Files\n\nWhen you see this warning:\n```\n🐑 Found potentially unused patch files:\n  - patches/old-package+1.0.0.patch\n```\n\nReview and remove unused patches to keep your repo clean.\n\n## Getting Help\n\n### Resources\n\n- [GitHub Issues](https://github.com/yowainwright/pastoralist/issues) - Report bugs\n- [Discussions](https://github.com/yowainwright/pastoralist/discussions) - Ask questions\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/pastoralist) - Community help\n\n### Before Filing an Issue\n\n1. Update to the latest version\n2. Run with `--debug` flag\n3. Check existing issues\n4. Provide minimal reproduction\n\n### Issue Template\n\nWhen reporting issues, include:\n- Pastoralist version\n- Node.js version\n- Package manager (npm/yarn/pnpm)\n- Relevant package.json sections\n- Debug output\n\n## Migration Help\n\n### From Manual Management\n\nIf you're tracking overrides manually (in comments or docs), pastoralist will:\n1. Automatically document all current overrides\n2. Track their usage going forward\n3. Clean up when no longer needed\n\n### From Other Tools\n\nMoving from other override management tools:\n1. Convert to npm `overrides` format\n2. Run `npx pastoralist`\n3. Remove old tool configuration\n\n## Advanced Debugging\n\n### Trace Dependency Paths\n\nTo understand why an override is needed:\n\n```javascript\n// debug-override.js\nimport { update } from 'pastoralist';\n\nawait update({\n  debug: true,\n  path: './package.json'\n});\n\n// Check the debug output for dependency paths\n```\n\n### Analyze Appendix\n\n```javascript\n// analyze-appendix.js\nimport fs from 'fs';\n\nconst pkg = JSON.parse(fs.readFileSync('./package.json', 'utf-8'));\nconst appendix = pkg.pastoralist?.appendix || {};\n\nconsole.log('Override Report:');\nObject.entries(appendix).forEach(([override, info]) => {\n  console.log(`\\n${override}:`);\n  console.log('  Dependents:', Object.keys(info.dependents || {}));\n  console.log('  Patches:', info.patches || 'none');\n});\n```","src/content/docs/troubleshooting.mdx","23048e1bebad2282","troubleshooting.mdx","workspaces",{"id":66,"data":68,"body":71,"filePath":72,"digest":73,"legacyId":74,"deferredRender":20},{"title":69,"description":70},"Workspaces & Monorepos","Using pastoralist in workspace and monorepo environments","Pastoralist works seamlessly with workspace and monorepo setups. This guide covers how to effectively use pastoralist across multiple packages.\n\n## How Pastoralist Works in Workspaces\n\nPastoralist operates on a single `package.json` at a time. In a workspace setup, you can run it on:\n- The root package.json\n- Individual workspace packages\n- Multiple packages using scripts\n\n## Basic Usage\n\n### Running on Root Package\n\n```bash\n# Run on the root package.json\npastoralist\n```\n\nThis will manage overrides in your root `package.json`, which affect all workspaces.\n\n### Running on Workspace Packages\n\n```bash\n# Run on a specific workspace package\npastoralist --path packages/app-a/package.json\n\n# Or navigate to the package\ncd packages/app-a\npastoralist\n```\n\n## Common Patterns\n\n### Pattern 1: Root-Level Overrides\n\nMost monorepos use root-level overrides that apply to all workspaces:\n\n```json\n// root package.json\n{\n  \"name\": \"my-monorepo\",\n  \"workspaces\": [\"packages/*\"],\n  \"overrides\": {\n    \"lodash\": \"4.17.21\",\n    \"react\": \"18.2.0\"\n  }\n}\n```\n\nRun pastoralist at the root:\n```bash\npastoralist\n```\n\n### Pattern 2: Package-Specific Overrides\n\nSome packages may need their own overrides:\n\n```json\n// packages/legacy-app/package.json\n{\n  \"name\": \"legacy-app\",\n  \"overrides\": {\n    \"react\": \"17.0.2\"  // This app needs React 17\n  }\n}\n```\n\nRun pastoralist for this package:\n```bash\npastoralist --path packages/legacy-app/package.json\n```\n\n### Pattern 3: Automated Workspace Management\n\nCreate a script to run pastoralist across all workspaces:\n\n```json\n// root package.json\n{\n  \"scripts\": {\n    \"pastoralist:all\": \"npm run pastoralist:root && npm run pastoralist:workspaces\",\n    \"pastoralist:root\": \"pastoralist\",\n    \"pastoralist:workspaces\": \"lerna run pastoralist --parallel\"\n  }\n}\n```\n\nOr with a custom script:\n\n```bash\n#!/bin/bash\n# scripts/update-overrides.sh\n\necho \"Updating root overrides...\"\npastoralist\n\necho \"Updating workspace overrides...\"\nfor pkg in packages/*/package.json; do\n  if grep -q \"overrides\" \"$pkg\"; then\n    echo \"Updating $pkg...\"\n    pastoralist --path \"$pkg\"\n  fi\ndone\n```\n\n## Integration Strategies\n\n### Strategy 1: Centralized Management (Recommended)\n\nKeep all overrides in the root `package.json`:\n\n**Pros:**\n- Single source of truth\n- Easier to maintain\n- Consistent versions across packages\n\n**Setup:**\n```json\n// root package.json\n{\n  \"overrides\": {\n    \"lodash\": \"4.17.21\"\n  },\n  \"scripts\": {\n    \"postinstall\": \"pastoralist\"\n  }\n}\n```\n\n### Strategy 2: Distributed Management\n\nAllow packages to manage their own overrides:\n\n**Pros:**\n- Package autonomy\n- Specific version requirements\n- Gradual migrations\n\n**Setup:**\n```json\n// packages/*/package.json\n{\n  \"scripts\": {\n    \"postinstall\": \"pastoralist\"\n  }\n}\n```\n\n### Strategy 3: Hybrid Approach\n\nCombine root overrides with package-specific ones:\n\n```json\n// root: security patches\n{\n  \"overrides\": {\n    \"minimist\": \"1.2.8\"  // Security fix\n  }\n}\n\n// packages: feature-specific\n{\n  \"overrides\": {\n    \"react\": \"17.0.2\"  // Compatibility requirement\n  }\n}\n```\n\n## Real-World Examples\n\n### Example 1: Lerna Monorepo\n\n```json\n{\n  \"name\": \"my-lerna-monorepo\",\n  \"scripts\": {\n    \"postinstall\": \"lerna bootstrap && pastoralist\",\n    \"update-overrides\": \"pastoralist && lerna run pastoralist\"\n  }\n}\n```\n\n### Example 2: npm Workspaces\n\n```json\n{\n  \"name\": \"my-npm-workspace\",\n  \"workspaces\": [\n    \"packages/*\",\n    \"apps/*\"\n  ],\n  \"scripts\": {\n    \"postinstall\": \"pastoralist\",\n    \"check-overrides\": \"pastoralist --debug\"\n  }\n}\n```\n\n### Example 3: pnpm Workspace\n\n```yaml\n# pnpm-workspace.yaml\npackages:\n  - 'packages/*'\n  - 'apps/*'\n```\n\n```json\n// root package.json\n{\n  \"scripts\": {\n    \"postinstall\": \"pastoralist\",\n    \"update-all\": \"pnpm -r exec pastoralist\"\n  }\n}\n```\n\n### Example 4: Yarn Workspaces\n\n```json\n{\n  \"private\": true,\n  \"workspaces\": {\n    \"packages\": [\"packages/*\"]\n  },\n  \"scripts\": {\n    \"postinstall\": \"pastoralist\",\n    \"workspaces:update\": \"yarn workspaces foreach run pastoralist\"\n  }\n}\n```\n\n## Best Practices\n\n### 1. Choose a Consistent Strategy\n\nDecide whether to:\n- Manage all overrides at the root (recommended for most cases)\n- Allow package-specific overrides (for complex requirements)\n- Use a hybrid approach (for gradual migrations)\n\n### 2. Automate with postinstall\n\nAlways add pastoralist to postinstall scripts:\n\n```json\n{\n  \"scripts\": {\n    \"postinstall\": \"pastoralist\"\n  }\n}\n```\n\n### 3. Document Your Strategy\n\nCreate a `DEPENDENCIES.md` file:\n\n```markdown\n# Dependency Management\n\nWe use pastoralist to manage overrides. Strategy:\n\n1. Security patches: Root package.json\n2. Feature overrides: Package-specific\n3. Run `npm run update-overrides` after changes\n```\n\n### 4. CI/CD Integration\n\nEnsure overrides are valid in CI:\n\n```yaml\n- name: Validate overrides\n  run: |\n    npm run pastoralist:all\n    git diff --exit-code\n```\n\n## Troubleshooting\n\n### Issue: Overrides Not Applied\n\n**Symptom:** Workspace packages don't respect root overrides\n\n**Solution:** Ensure you're using a package manager that supports workspace overrides:\n- npm 8.3+ ✅\n- yarn 1.x (use resolutions) ✅\n- pnpm (use pnpm.overrides) ✅\n\n### Issue: Duplicate Appendix Entries\n\n**Symptom:** Same override tracked in multiple package.json files\n\n**Solution:** This is normal! Each package.json maintains its own appendix for clarity.\n\n### Issue: Performance in Large Monorepos\n\n**Symptom:** Pastoralist takes long to run across many packages\n\n**Solution:** Run in parallel:\n```bash\n# Using GNU parallel\nfind . -name \"package.json\" -path \"*/node_modules\" -prune -o -print | \\\n  parallel \"pastoralist --path {}\"\n```\n\n## Migration Guide\n\n### Moving to Centralized Overrides\n\n1. Collect all overrides:\n```bash\nfind . -name \"package.json\" -not -path \"*/node_modules/*\" \\\n  -exec jq '.overrides // {}' {} \\; | jq -s 'add'\n```\n\n2. Add to root package.json\n3. Remove from individual packages\n4. Run pastoralist at root\n\n### Splitting Overrides\n\n1. Identify package-specific needs\n2. Move relevant overrides to packages\n3. Run pastoralist on each package\n4. Update CI/CD scripts\n\n## Advanced Patterns\n\n### Dynamic Override Detection\n\n```javascript\n// scripts/check-overrides.js\nconst { execSync } = require('child_process');\nconst { readdirSync } = require('fs');\n\nconst packages = readdirSync('./packages');\npackages.forEach(pkg => {\n  try {\n    execSync(`pastoralist --path packages/${pkg}/package.json`);\n    console.log(`✅ ${pkg}: overrides updated`);\n  } catch (error) {\n    console.log(`❌ ${pkg}: no overrides or error`);\n  }\n});\n```\n\n### Override Inheritance\n\nCreate a base configuration:\n\n```json\n// packages/base-config/overrides.json\n{\n  \"lodash\": \"4.17.21\",\n  \"minimist\": \"1.2.8\"\n}\n```\n\nApply to packages:\n```javascript\n// scripts/apply-base-overrides.js\nconst base = require('./packages/base-config/overrides.json');\n// Apply base overrides to each package\n```\n\n## Next Steps\n\n- Set up pastoralist in your workspace\n- Choose a management strategy\n- Add automation scripts\n- Document your approach for the team","src/content/docs/workspaces.mdx","1b98a0eef016e268","workspaces.mdx","introduction",{"id":75,"data":77,"body":80,"filePath":81,"digest":82,"legacyId":83,"deferredRender":20},{"title":78,"description":79},"Introduction to Pastoralist","Pastoralist is a dependency management tool that keeps your package.json overrides, resolutions, and patches up-to-date automatically","\u003Cdiv className=\"flex flex-wrap gap-2 mb-8\">\n  \u003Ca href=\"https://badge.fury.io/js/pastoralist\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \u003Cimg src=\"https://badge.fury.io/js/pastoralist.svg\" alt=\"npm version\" />\n  \u003C/a>\n  \u003Ca href=\"https://github.com/yowainwright/pastoralist\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \u003Cimg src=\"https://img.shields.io/github/stars/yowainwright/pastoralist?style=social\" alt=\"GitHub stars\" />\n  \u003C/a>\n  \u003Ca href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \u003Cimg src=\"https://img.shields.io/badge/TypeScript-Ready-blue\" alt=\"TypeScript Ready\" />\n  \u003C/a>\n  \u003Ca href=\"https://opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \u003Cimg src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\" />\n  \u003C/a>\n\u003C/div>\n\n## What is Pastoralist?\n\nPastoralist is a command-line tool that automatically manages and updates your package.json overrides, resolutions, and patches. It ensures that your dependency overrides stay up-to-date with the latest versions, saving you time and reducing potential security vulnerabilities.\n\n## Why is Pastoralist Awesome?\n\n### The Problem\n\nWhen working with Node.js projects, you often need to override specific package versions due to:\n- Security vulnerabilities in transitive dependencies\n- Bug fixes that haven't been merged upstream\n- Breaking changes you need to avoid\n- Custom patches for specific use cases\n\nHowever, managing these overrides manually is tedious and error-prone:\n\n```json\n{\n  \"overrides\": {\n    \"lodash\": \"4.17.19\",\n    \"minimist\": \"1.2.5\",\n    \"node-fetch\": \"2.6.7\"\n  }\n}\n```\n\nOver time, these overrides become outdated, and you might miss important security updates or bug fixes.\n\n### The Solution\n\nPastoralist automates this process by:\n- Scanning your package.json for overrides, resolutions, and patches\n- Checking for newer versions of overridden packages\n- Updating them automatically while maintaining compatibility\n- Removing overrides that are no longer needed\n\nWith one simple command, you can ensure all your overrides are current:\n\n```bash\npastoralist\n```\n\n## Benefits\n\n- **🚀 Automated Updates**: No more manual version checking\n- **🔒 Security**: Stay current with security patches\n- **📊 Transparency**: Clear tracking of all overrides\n- **🧹 Clean**: Removes unnecessary overrides automatically\n- **⚡ Fast**: Updates all overrides with one command\n- **📦 Compatible**: Works with npm, yarn, pnpm, and bun","src/content/docs/introduction.mdx","1b9ceaafa959e7c8","introduction.mdx"]